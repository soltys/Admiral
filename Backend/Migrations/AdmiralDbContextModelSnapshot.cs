// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace code.Migrations
{
    [DbContext(typeof(AdmiralDbContext))]
    partial class AdmiralDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f86d95d-6ffb-4c1c-b8d9-c2a5e6be2993"),
                            Created = new DateTime(2020, 4, 12, 12, 22, 1, 565, DateTimeKind.Local).AddTicks(2505),
                            Name = "Game number 1",
                            Status = 0
                        });
                });

            modelBuilder.Entity("GamePlayer", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GamesPlayers");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("7f86d95d-6ffb-4c1c-b8d9-c2a5e6be2993"),
                            PlayerId = new Guid("223afe6d-e6af-40a9-c57b-08d7db3a097e")
                        });
                });

            modelBuilder.Entity("Pawn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Col")
                        .HasColumnType("int");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OldCol")
                        .HasColumnType("int");

                    b.Property<int>("OldRow")
                        .HasColumnType("int");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Pawns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("111afe6d-e6af-40a9-c57b-08d7db3a097e"),
                            Col = 2,
                            GameId = new Guid("7f86d95d-6ffb-4c1c-b8d9-c2a5e6be2993"),
                            OldCol = 0,
                            OldRow = 0,
                            PlayerId = new Guid("223afe6d-e6af-40a9-c57b-08d7db3a097e"),
                            Row = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("222afe6d-e6af-40a9-c57b-08d7db3a097e"),
                            Col = 4,
                            GameId = new Guid("7f86d95d-6ffb-4c1c-b8d9-c2a5e6be2993"),
                            OldCol = 1,
                            OldRow = 1,
                            PlayerId = new Guid("223afe6d-e6af-40a9-c57b-08d7db3a097e"),
                            Row = 4,
                            Type = 3
                        });
                });

            modelBuilder.Entity("Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = new Guid("223afe6d-e6af-40a9-c57b-08d7db3a097e"),
                            Name = "Roman"
                        });
                });

            modelBuilder.Entity("GamePlayer", b =>
                {
                    b.HasOne("Game", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pawn", b =>
                {
                    b.HasOne("Game", null)
                        .WithMany("Pawns")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
